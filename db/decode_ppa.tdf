--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_decode 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_ppa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode333w[1..0]	: WIRE;
	w_anode342w[3..0]	: WIRE;
	w_anode359w[3..0]	: WIRE;
	w_anode369w[3..0]	: WIRE;
	w_anode379w[3..0]	: WIRE;
	w_anode389w[3..0]	: WIRE;
	w_anode399w[3..0]	: WIRE;
	w_anode409w[3..0]	: WIRE;
	w_anode419w[3..0]	: WIRE;
	w_anode431w[1..0]	: WIRE;
	w_anode438w[3..0]	: WIRE;
	w_anode449w[3..0]	: WIRE;
	w_anode459w[3..0]	: WIRE;
	w_anode469w[3..0]	: WIRE;
	w_anode479w[3..0]	: WIRE;
	w_anode489w[3..0]	: WIRE;
	w_anode499w[3..0]	: WIRE;
	w_anode509w[3..0]	: WIRE;
	w_data331w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode509w[3..3], w_anode499w[3..3], w_anode489w[3..3], w_anode479w[3..3], w_anode469w[3..3], w_anode459w[3..3], w_anode449w[3..3], w_anode438w[3..3]), ( w_anode419w[3..3], w_anode409w[3..3], w_anode399w[3..3], w_anode389w[3..3], w_anode379w[3..3], w_anode369w[3..3], w_anode359w[3..3], w_anode342w[3..3]));
	w_anode333w[] = ( (w_anode333w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode342w[] = ( (w_anode342w[2..2] & (! w_data331w[2..2])), (w_anode342w[1..1] & (! w_data331w[1..1])), (w_anode342w[0..0] & (! w_data331w[0..0])), w_anode333w[1..1]);
	w_anode359w[] = ( (w_anode359w[2..2] & (! w_data331w[2..2])), (w_anode359w[1..1] & (! w_data331w[1..1])), (w_anode359w[0..0] & w_data331w[0..0]), w_anode333w[1..1]);
	w_anode369w[] = ( (w_anode369w[2..2] & (! w_data331w[2..2])), (w_anode369w[1..1] & w_data331w[1..1]), (w_anode369w[0..0] & (! w_data331w[0..0])), w_anode333w[1..1]);
	w_anode379w[] = ( (w_anode379w[2..2] & (! w_data331w[2..2])), (w_anode379w[1..1] & w_data331w[1..1]), (w_anode379w[0..0] & w_data331w[0..0]), w_anode333w[1..1]);
	w_anode389w[] = ( (w_anode389w[2..2] & w_data331w[2..2]), (w_anode389w[1..1] & (! w_data331w[1..1])), (w_anode389w[0..0] & (! w_data331w[0..0])), w_anode333w[1..1]);
	w_anode399w[] = ( (w_anode399w[2..2] & w_data331w[2..2]), (w_anode399w[1..1] & (! w_data331w[1..1])), (w_anode399w[0..0] & w_data331w[0..0]), w_anode333w[1..1]);
	w_anode409w[] = ( (w_anode409w[2..2] & w_data331w[2..2]), (w_anode409w[1..1] & w_data331w[1..1]), (w_anode409w[0..0] & (! w_data331w[0..0])), w_anode333w[1..1]);
	w_anode419w[] = ( (w_anode419w[2..2] & w_data331w[2..2]), (w_anode419w[1..1] & w_data331w[1..1]), (w_anode419w[0..0] & w_data331w[0..0]), w_anode333w[1..1]);
	w_anode431w[] = ( (w_anode431w[0..0] & data_wire[3..3]), enable_wire);
	w_anode438w[] = ( (w_anode438w[2..2] & (! w_data331w[2..2])), (w_anode438w[1..1] & (! w_data331w[1..1])), (w_anode438w[0..0] & (! w_data331w[0..0])), w_anode431w[1..1]);
	w_anode449w[] = ( (w_anode449w[2..2] & (! w_data331w[2..2])), (w_anode449w[1..1] & (! w_data331w[1..1])), (w_anode449w[0..0] & w_data331w[0..0]), w_anode431w[1..1]);
	w_anode459w[] = ( (w_anode459w[2..2] & (! w_data331w[2..2])), (w_anode459w[1..1] & w_data331w[1..1]), (w_anode459w[0..0] & (! w_data331w[0..0])), w_anode431w[1..1]);
	w_anode469w[] = ( (w_anode469w[2..2] & (! w_data331w[2..2])), (w_anode469w[1..1] & w_data331w[1..1]), (w_anode469w[0..0] & w_data331w[0..0]), w_anode431w[1..1]);
	w_anode479w[] = ( (w_anode479w[2..2] & w_data331w[2..2]), (w_anode479w[1..1] & (! w_data331w[1..1])), (w_anode479w[0..0] & (! w_data331w[0..0])), w_anode431w[1..1]);
	w_anode489w[] = ( (w_anode489w[2..2] & w_data331w[2..2]), (w_anode489w[1..1] & (! w_data331w[1..1])), (w_anode489w[0..0] & w_data331w[0..0]), w_anode431w[1..1]);
	w_anode499w[] = ( (w_anode499w[2..2] & w_data331w[2..2]), (w_anode499w[1..1] & w_data331w[1..1]), (w_anode499w[0..0] & (! w_data331w[0..0])), w_anode431w[1..1]);
	w_anode509w[] = ( (w_anode509w[2..2] & w_data331w[2..2]), (w_anode509w[1..1] & w_data331w[1..1]), (w_anode509w[0..0] & w_data331w[0..0]), w_anode431w[1..1]);
	w_data331w[2..0] = data_wire[2..0];
END;
--VALID FILE
